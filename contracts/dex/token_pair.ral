import "std/fungible_token_interface"

Contract TokenPair(
  tokenPairFactory: TokenPairFactory,
  token0Id: ByteVec,
  token1Id: ByteVec,
  mut reserve0: U256,
  mut reserve1: U256,
  mut blockTimeStampLast: U256,
  mut price0CumulativeLast: U256,
  mut price1CumulativeLast: U256,
  mut totalSupply: U256,
  mut kLast: U256,
  mut feeCollectorId: ByteVec
) extends Math(), Constants() implements IFungibleToken {

  event Mint(sender: Address, amount0: U256, amount1: U256, liquidity: U256)
  event Burn(sender: Address, amount0: U256, amount1: U256, liquidity: U256)
  event Swap(sender: Address, amount0In: U256, amount1In: U256, amount0Out: U256, amount1Out: U256, to: Address)

  const MINIMUM_LIQUIDITY = 1000

  @using(updateFields = true)
  pub fn setFeeCollectorId(id: ByteVec) -> () {
    checkCaller!(callerContractId!() == contractId!(tokenPairFactory), ErrorCodes.InvalidCaller)
    feeCollectorId = id
  }

  pub fn getTokenPair() -> (ByteVec, ByteVec) {
    return token0Id, token1Id
  }

  pub fn getReserves() -> (U256, U256) {
    return reserve0, reserve1
  }

  pub fn getSymbol() -> ByteVec {
    return #414c50482d444558 // ALPH-DEX
  }

  pub fn getName() -> ByteVec {
    return #414c50482d444558 // ALPH-DEX
  }

  pub fn getDecimals() -> U256 {
    return 18
  }

  pub fn getTotalSupply() -> U256 {
    return totalSupply
  }

  pub fn getBlockTimeStampLast() -> U256 {
    return blockTimeStampLast
  }

  pub fn getPrice0CumulativeLast() -> U256 {
    return price0CumulativeLast
  }

  pub fn getPrice1CumulativeLast() -> U256 {
    return price1CumulativeLast
  }

  @using(updateFields = true)
  fn update(newReserve0: U256, newReserve1: U256) -> () {
    let max = 1 << 112
    assert!(newReserve0 < max && newReserve1 < max, ErrorCodes.ReserveOverflow)

    let blockTimeStampSecond = (blockTimeStamp!() / 1000) % (1 << 32)
    let timeElapsed = blockTimeStampSecond - blockTimeStampLast
    if (timeElapsed > 0 && reserve0 > 0 && reserve1 > 0) {
      // allow overflow for TWAP(time-weighted-average-price)
      price0CumulativeLast = price0CumulativeLast |+| (uqdiv(reserve1, reserve0) * timeElapsed)
      price1CumulativeLast = price1CumulativeLast |+| (uqdiv(reserve0, reserve1) * timeElapsed)
    }
    
    reserve0 = newReserve0
    reserve1 = newReserve1
    blockTimeStampLast = blockTimeStampSecond
  }

  @using(updateFields = true)
  fn mintFee(reserve0_: U256, reserve1_: U256) -> (Bool, U256) {
    let mut fee = 0
    let feeOn = feeCollectorId != #
    if (feeOn) {
      if (kLast != 0) {
        let rootK = sqrt(reserve0_ * reserve1_)
        let rootKLast = sqrt(kLast)
        if (rootK > rootKLast) {
          let numerator = totalSupply * (rootK - rootKLast)
          let denominator = rootK * 5 + rootKLast
          fee = numerator / denominator
          totalSupply = totalSupply + fee
        }
      }
    } else {
      kLast = 0
    }
    return feeOn, fee
  }

  @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
  pub fn mint(sender: Address, amount0: U256, amount1: U256) -> U256 {
    let (feeOn, feeAmount) = mintFee(reserve0, reserve1)

    let mut liquidity = 0
    if (totalSupply == 0) {
      let initLiquidity = sqrt(amount0 * amount1)
      assert!(initLiquidity > MINIMUM_LIQUIDITY, ErrorCodes.InsufficientInitLiquidity)
      liquidity = initLiquidity - MINIMUM_LIQUIDITY
      totalSupply = totalSupply + MINIMUM_LIQUIDITY
      burnToken!(selfAddress!(), selfTokenId!(), MINIMUM_LIQUIDITY)
    } else {
      let liquidity0 = (amount0 * totalSupply) / reserve0
      let liquidity1 = (amount1 * totalSupply) / reserve1
      liquidity = if (liquidity0 > liquidity1) liquidity1 else liquidity0
    }

    assert!(liquidity > 0, ErrorCodes.InsufficientLiquidityMinted)
    transferTokenFromSelf!(sender, selfTokenId!(), liquidity)
    transferTokenToSelf!(sender, token0Id, amount0)
    transferTokenToSelf!(sender, token1Id, amount1)

    totalSupply = totalSupply + liquidity
    update(reserve0 + amount0, reserve1 + amount1)

    if (feeOn) {
      collectFeeAndUpdateKLast{selfAddress!() -> selfTokenId!(): feeAmount}(feeAmount)
    }
    emit Mint(sender, amount0, amount1, liquidity)
    return liquidity
  }

  @using(preapprovedAssets = true, assetsInContract = true, updateFields = true, checkExternalCaller = false)
  pub fn burn(sender: Address, liquidity: U256) -> (U256, U256) {
    let (feeOn, feeAmount) = mintFee(reserve0, reserve1)

    let amount0 = (liquidity * reserve0) / totalSupply
    let amount1 = (liquidity * reserve1) / totalSupply
    assert!(amount0 > 0 && amount1 > 0, ErrorCodes.InsufficientLiquidityBurned)

    transferTokenToSelf!(sender, selfTokenId!(), liquidity)
    transferTokenFromSelf!(sender, token0Id, amount0)
    transferTokenFromSelf!(sender, token1Id, amount1)

    totalSupply = totalSupply - liquidity
    update(reserve0 - amount0, reserve1 - amount1)

    if (feeOn) {
      collectFeeAndUpdateKLast{selfAddress!() -> selfTokenId!(): feeAmount}(feeAmount)
    }
    emit Burn(sender, amount0, amount1, liquidity)
    return amount0, amount1
  }

  @using(preapprovedAssets = true, assetsInContract = true, checkExternalCaller = false)
  pub fn swap(sender: Address, to: Address, amount0In: U256, amount1In: U256, amount0Out: U256, amount1Out: U256) -> () {
    assert!(amount0Out > 0 || amount1Out > 0, ErrorCodes.InsufficientOutputAmount)
    assert!(amount0Out < reserve0 && amount1Out < reserve1, ErrorCodes.InsufficientLiquidity)

    // fee: 0.003 * amountIn
    let newReserve0 = reserve0 + amount0In - amount0Out
    let newReserve1 = reserve1 + amount1In - amount1Out
    let newReserve0Adjusted = (newReserve0 * 1000) - (amount0In * 3)
    let newReserve1Adjusted = (newReserve1 * 1000) - (amount1In * 3)
    let kAdjusted = reserve0 * reserve1 * 1000_000
    assert!(newReserve0Adjusted * newReserve1Adjusted >= kAdjusted, ErrorCodes.InvalidK)

    if (amount0In > 0) { transferTokenToSelf!(sender, token0Id, amount0In) }
    if (amount1In > 0) { transferTokenToSelf!(sender, token1Id, amount1In) }
    if (amount0Out > 0) { transferTokenFromSelf!(to, token0Id, amount0Out) }
    if (amount1Out > 0) { transferTokenFromSelf!(to, token1Id, amount1Out) }

    update(newReserve0, newReserve1)
    emit Swap(sender, amount0In, amount1In, amount0Out, amount1Out, to)
  }

  @using(assetsInContract = true)
  pub fn collectFeeManually() -> () {
    checkCaller!(callerContractId!() == feeCollectorId, ErrorCodes.InvalidCaller)
    let (feeOn, feeAmount) = mintFee(reserve0, reserve1)
    assert!(feeOn, ErrorCodes.FeeCollectorNotEnabled)
    collectFeeAndUpdateKLast{selfAddress!() -> selfTokenId!(): feeAmount}(feeAmount)
  }

  @using(updateFields = true, preapprovedAssets = true)
  fn collectFeeAndUpdateKLast(feeAmount: U256) -> () {
    if (feeAmount > 0) {
      FeeCollectorPerTokenPair(feeCollectorId).collectFee{selfAddress!() -> selfTokenId!(): feeAmount}(selfAddress!(), feeAmount)
    }
    kLast = reserve0 * reserve1
  }
}
