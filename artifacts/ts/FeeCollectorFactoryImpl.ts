/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as FeeCollectorFactoryImplContractJson } from "../examples/FeeCollectorFactoryImpl.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace FeeCollectorFactoryImplTypes {
  export type Fields = {
    feeCollectorPerTokenPairTemplateId: HexString;
    tokenPairFactory: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    createFeeCollector: {
      params: CallContractParams<{
        caller: Address;
        alphAmount: bigint;
        tokenPair: HexString;
      }>;
      result: CallContractResult<HexString>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    createFeeCollector: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        alphAmount: bigint;
        tokenPair: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  FeeCollectorFactoryImplInstance,
  FeeCollectorFactoryImplTypes.Fields
> {
  encodeFields(fields: FeeCollectorFactoryImplTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  consts = {
    ErrorCodes: {
      ReserveOverflow: BigInt("0"),
      InsufficientInitLiquidity: BigInt("1"),
      InsufficientLiquidityMinted: BigInt("2"),
      InsufficientLiquidityBurned: BigInt("3"),
      InvalidToAddress: BigInt("4"),
      InsufficientLiquidity: BigInt("5"),
      InvalidTokenInId: BigInt("6"),
      InvalidCalleeId: BigInt("7"),
      InvalidK: BigInt("8"),
      InsufficientOutputAmount: BigInt("9"),
      InsufficientInputAmount: BigInt("10"),
      IdenticalTokenIds: BigInt("11"),
      Expired: BigInt("12"),
      InsufficientToken0Amount: BigInt("13"),
      InsufficientToken1Amount: BigInt("14"),
      TokenNotExist: BigInt("15"),
      InvalidCaller: BigInt("16"),
      FeeCollectorNotEnabled: BigInt("17"),
    },
  };

  at(address: string): FeeCollectorFactoryImplInstance {
    return new FeeCollectorFactoryImplInstance(address);
  }

  tests = {
    createFeeCollector: async (
      params: TestContractParamsWithoutMaps<
        FeeCollectorFactoryImplTypes.Fields,
        { caller: Address; alphAmount: bigint; tokenPair: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(
        this,
        "createFeeCollector",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: FeeCollectorFactoryImplTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const FeeCollectorFactoryImpl = new Factory(
  Contract.fromJson(
    FeeCollectorFactoryImplContractJson,
    "",
    "966f75cddefe774a87dbf778012f4f3f494b3a860f4c975d0c5262a1be185d49",
    []
  )
);
registerContract(FeeCollectorFactoryImpl);

// Use this class to interact with the blockchain
export class FeeCollectorFactoryImplInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<FeeCollectorFactoryImplTypes.State> {
    return fetchContractState(FeeCollectorFactoryImpl, this);
  }

  view = {
    createFeeCollector: async (
      params: FeeCollectorFactoryImplTypes.CallMethodParams<"createFeeCollector">
    ): Promise<
      FeeCollectorFactoryImplTypes.CallMethodResult<"createFeeCollector">
    > => {
      return callMethod(
        FeeCollectorFactoryImpl,
        this,
        "createFeeCollector",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    createFeeCollector: async (
      params: FeeCollectorFactoryImplTypes.SignExecuteMethodParams<"createFeeCollector">
    ): Promise<
      FeeCollectorFactoryImplTypes.SignExecuteMethodResult<"createFeeCollector">
    > => {
      return signExecuteMethod(
        FeeCollectorFactoryImpl,
        this,
        "createFeeCollector",
        params
      );
    },
  };

  async multicall<Calls extends FeeCollectorFactoryImplTypes.MultiCallParams>(
    calls: Calls
  ): Promise<FeeCollectorFactoryImplTypes.MultiCallResults<Calls>>;
  async multicall<
    Callss extends FeeCollectorFactoryImplTypes.MultiCallParams[]
  >(
    callss: Narrow<Callss>
  ): Promise<FeeCollectorFactoryImplTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | FeeCollectorFactoryImplTypes.MultiCallParams
      | FeeCollectorFactoryImplTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      FeeCollectorFactoryImpl,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
